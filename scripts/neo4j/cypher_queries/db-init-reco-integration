// db-init-base-model

// This represents the current base working model of Neo4
// Please do not alter this file without checking with the team
// -- things will very likely break in the server


CREATE(ls0: LearningStyle {learningStyleID: '0', name:'Activist', description: 'Learn by doing'})
CREATE(ls1: LearningStyle {learningStyleID: '1', name:'Theorist', description: 'Want to undstand the theory behind it'})
CREATE(ls2: LearningStyle {learningStyleID: '2', name:'Pragmatist', description: 'Want the real world application'})
CREATE(ls3: LearningStyle {learningStyleID: '3', name:'Reflector', description: 'Learn by observing'})

// Sam Sequence #2 Courses
MATCH (dbme: Course) WHERE toLower(dbme.name) CONTAINS 'database management essentials'
MATCH (mong: Course) WHERE toLower(mong.name) ENDS WITH 'introduction to mongodb'
MATCH (ssdv: Course) WHERE toLower(ssdv.name) CONTAINS 'server-side development with nodejs, express and mongodb'
MATCH (test: Course) WHERE toLower(test.name) CONTAINS 'software testing' AND toLower(test.institution) CONTAINS 'utah'
MATCH (secu: Course) WHERE toLower(secu.name) CONTAINS 'software security'
MATCH (mobi: Course) WHERE toLower(mobi.name) CONTAINS 'multiplatform mobile app development with react'

MATCH (sam: User { username: 'Sam' })

// Sam Sequence #1 Relationships
MERGE (st01: PathStart { pathID: '1', name: "Sam Chao's Front End Development" })-[:BELONGS_TO {trackID: '1'}]->(tr01: Track { trackID: '1', name: 'Front End Development' })
MERGE (st01)-[:NEXT {pathID: '1'}]->(pfjs)
MERGE (st01)-[:NEXT {pathID: '1'}]->(gitv)
MERGE (pfjs)-[:NEXT {pathID: '1'}]->(acss)
MERGE (pfjs)-[:NEXT {pathID: '1'}]->(pwjs)
MERGE (gitv)-[:NEXT {pathID: '1'}]->(pwjs)
MERGE (acss)-[:NEXT {pathID: '1'}]->(feui)
MERGE (pwjs)-[:NEXT {pathID: '1'}]->(feui)
MERGE (feui)-[:NEXT {pathID: '1'}]->(reac)
MERGE (feui)-[:NEXT {pathID: '1'}]->(reac)
MERGE (reac)-[:NEXT {pathID: '1'}]->(mobi)
MERGE (mobi)-[:NEXT {pathID: '1'}]->(tr01)
MERGE (sam)-[:CREATED]->(st01)
MERGE (sam)-[:SUBSCRIBED]->(st01)


// Sam Sequence #2 Relationships
MERGE (st02: PathStart { pathID: '2', name: "Sam Chao's Full Stack Development" })-[:BELONGS_TO {trackID: '2'}]->(tr02: Track { trackID: '2', name: 'Full Stack Development' })
MERGE (st02)-[:NEXT {pathID: '2'}]->(pfjs)
MERGE (st02)-[:NEXT {pathID: '2'}]->(gitv)
MERGE (pfjs)-[:NEXT {pathID: '2'}]->(acss)
MERGE (pfjs)-[:NEXT {pathID: '2'}]->(pwjs)
MERGE (gitv)-[:NEXT {pathID: '2'}]->(pwjs)
MERGE (acss)-[:NEXT {pathID: '2'}]->(feui)
MERGE (pwjs)-[:NEXT {pathID: '2'}]->(feui)
MERGE (feui)-[:NEXT {pathID: '2'}]->(reac)
MERGE (feui)-[:NEXT {pathID: '2'}]->(reac)
MERGE (reac)-[:NEXT {pathID: '2'}]->(mobi)
MERGE (mobi)-[:NEXT {pathID: '2'}]->(dbme)
MERGE (dbme)-[:NEXT {pathID: '2'}]->(mong)
MERGE (mong)-[:NEXT {pathID: '2'}]->(ssdv)
MERGE (ssdv)-[:NEXT {pathID: '2'}]->(test)
MERGE (test)-[:NEXT {pathID: '2'}]->(secu)
MERGE (secu)-[:NEXT {pathID: '2'}]->(tr02)
MERGE (sam)-[:CREATED]->(st02)
MERGE (sam)-[:SUBSCRIBED]->(st02)


// This is a trick to separate commands
WITH count(*) as dummy

//Register Sam's learning style
MATCH (u:User),(ls:LearningStyle)
WHERE u.userID = "2" AND ls.learningStyleID = "1"
CREATE (u)-[:LEARNS_BY]->(ls)

// This is a trick to separate commands
WITH count(*) as dummy

// Register Sam's Experience relationships to Skill nodes
MATCH (u:User),(s:Skill)
WHERE u.userID = "2" AND s.skillID in [ "5","2"]
CREATE (u)-[:EXPERIENCED]->(s)

// This is a trick to separate commands
WITH count(*) as dummy

//Register Sam's Interests relationships to Skill Nodes
MATCH (u:User),(s:Skill)
WHERE u.userID = "2" AND s.skillID in [ "7","15","18"]
CREATE (u)-[:INTERESTED]->(s)


// RECOMMENDATION ALGO INTEGRATION TEST

// This is a trick to separate commands
WITH count(*) as dummy

// Create a couple fake courses (to see them clearly)
CREATE ( c1: Course {courseID: 'madeupCourse1', name: 'Course A', subject: 'A', tags: ["one"]} )
CREATE ( c2: Course {courseID: 'madeupCourse2', name: 'Course B', subject: 'B', tags: ["two"]} )
CREATE ( c3: Course {courseID: 'madeupCourse3', name: 'Course C', subject: 'C', tags: ["three"]} )
CREATE ( t0: Track {trackID: 'madeupTrack', name: 'Experimental Track' } )

MERGE (c1)-[:NEXT {sequenceID: 'exp1'}]->(c3)
MERGE (c2)-[:NEXT {sequenceID: 'exp2'}]->(c3)
MERGE (c3)-[:NEXT {sequenceID: 'exp3'}]->(t0)

