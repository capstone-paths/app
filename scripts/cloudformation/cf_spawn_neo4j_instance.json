{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template to create an Amazon EC2 instance running bitnami certified Neo4j Database instance.
  This can be deployed in US-EAST-1 only as the AMI used is from this region.
  This example creates an EC2 security group for the instance to give you SSH access.",

  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "neo4j-ec2-key"
    },

    "RoleName": {
      "Description" : "Lernt Neo4j EC2 Role",
      "Type" : "String",
      "Default" : "Lernt_EC2_Neo4j_Role",
      "ConstraintDescription" : "Must be a valid IAM Role"
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t3.small",
      "AllowedValues" : [ "t3.small", "t3.medium", "t3.large"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "67.246.242.83/32",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x, currently set to ajay's IP"
   }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t3.small"    : { "Arch" : "HVM64"  },
      "t3.medium"   : { "Arch" : "HVM64"  },
      "t3.large"    : { "Arch" : "HVM64"  }
    },

    "AWSInstanceType2NATArch" : {
      "t3.small"    : { "Arch" : "NATHVM64"  },
      "t3.medium"   : { "Arch" : "NATHVM64"  },
      "t3.large"    : { "Arch" : "NATHVM64"  }
    }
,
    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"HVM64" : "ami-0bb397e4f9de10b02", "HVMG2" : "NOT_SUPPORTED"}
    }

  },

  "Resources" : {
    "EC2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "Tags" : [
            {"Key" : "Name", "Value" : "Neo4j-CF-EC2"}
        ],
        "KeyName" : { "Ref" : "KeyName" },
         "IamInstanceProfile"  : { "Ref" : "RoleName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "UserData":{  "Fn::Base64" : {
                      "Fn::Join" : ["", [
      "Content-Type: multipart/mixed; boundary=\"//\"\n",
      "MIME-Version: 1.0\n",
      "--//\n",
      "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
      "MIME-Version: 1.0\n",
      "Content-Transfer-Encoding: 7bit\n",
      "Content-Disposition: attachment; filename=\"cloud-config.txt\"\n",
      "cloud_final_modules:\n",
      "- [scripts-user, always]\n",
      "--//\n",
      "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
      "MIME-Version: 1.0\n",
      "Content-Transfer-Encoding: 7bit\n",
      "Content-Disposition: attachment; filename=\"userdata.txt\"\n",
      "#!/bin/bash\n",
      "#stop neo4j database\n",
      "/opt/bitnami/neo4j/bin/neo4j stop &\n",
      "/bin/echo \"Stopping Neo4j Database\"\n",
      "wait\n",
      "# install required libraries\n",
      "/usr/bin/apt-get update\n",
      "sleep 60\n",
      "/usr/bin/apt-get install python3-pip -y\n",
      "sleep 60\n",
      "/usr/bin/pip3 install --upgrade awscli\n",
      "sleep 60\n",
      "# getting database credentials - db dns\n",
      "ec2_public_dns=$(/usr/bin/wget -q -O - http://169.254.169.254/latest/meta-data/public-hostname)\n",
      "# setting cypher browser url\n",
      "neo4j_cypher_url=\"[http://$ec2_public_dns:7474/browser/]\"\n",
      "# setting bolt url\n",
      "neo4j_bolt_url=\"bolt://$ec2_public_dns:7687\"\n",
      "# getting database credentials from file bitnami_credentials\n",
      "str=$(/bin/grep -o \"'.*'\" /home/bitnami/bitnami_credentials)\n",
      "arr=(${str//' '/ })\n",
      "neo4j_user=${arr[0]}\n",
      "neo4j_user=$(echo $neo4j_user | tr -d \"'\")\n",
      "neo4j_pwd=${arr[2]}\n",
      "neo4j_pwd=$(echo $neo4j_pwd | tr -d \"'\")\n",
      "# setting credentials in parameter store\n",
      "/usr/bin/aws ssm delete-parameter --name \"CF_PS_NEO4J_BOLT_URL\" --region us-east-1\n",
      "/usr/bin/aws ssm delete-parameter --name \"CF_PS_NEO4J_CYPHER_URL\" --region us-east-1\n",
      "/usr/bin/aws ssm delete-parameter --name \"CF_PS_NEO4J_USER\" --region us-east-1\n",
      "/usr/bin/aws ssm delete-parameter --name \"CF_PS_NEO4J_PWD\"  --region us-east-1\n",
      "/usr/bin/aws ssm put-parameter --name \"CF_PS_NEO4J_CYPHER_URL\" --value \"$neo4j_cypher_url\" --type String --tier Standard --region us-east-1 --overwrite\n",
      "/usr/bin/aws ssm put-parameter --name \"CF_PS_NEO4J_BOLT_URL\" --value \"$neo4j_bolt_url\" --type String --tier Standard --region us-east-1 --overwrite\n",
      "/usr/bin/aws ssm put-parameter --name \"CF_PS_NEO4J_USER\" --value \"$neo4j_user\" --type String --tier Standard --region us-east-1 --overwrite\n",
      "/usr/bin/aws ssm put-parameter --name \"CF_PS_NEO4J_PWD\" --value \"$neo4j_pwd\" --type String --tier Standard --region us-east-1 --overwrite\n",
      "# download required jar files (used wget/ curl was getting the html content and not the file)\n",
      "/usr/bin/wget  -N --directory-prefix=/opt/bitnami/neo4j/plugins/ https://github.com/capstone-paths/app/raw/master/neo4j-plugins/graph-algorithms-algo.jar\n",
      "/usr/bin/wget  -N --directory-prefix=/opt/bitnami/neo4j/plugins/ https://github.com/capstone-paths/app/raw/master/neo4j-plugins/lernt-neo4j-procedures.jar\n",
      "#download backup\n",
      "/usr/bin/aws s3 cp s3://lernt-db-backup/lernt_init_db.dump /home/bitnami/lernt_init_db.dump  &\n",
      "wait\n",
      "# update Neo4j Configuration file\n",
      "if cat /opt/bitnami/neo4j/conf/neo4j.conf | grep dbms.security.procedures.unrestricted=algo.*\n",
      "then\n",
      " /bin/echo \"Neo4j Config already updated.\"\n",
      "else\n",
      " /bin/echo \"Updating Neo4j Config\"\n",
      " lno=$(/bin/grep -nr dbms.security.procedures.unrestricted /opt/bitnami/neo4j/conf/neo4j.conf | /usr/bin/cut -d : -f 1)\n",
      " lno+=\"i\"\n",
      " /bin/sed -i \"$lno\"'dbms.security.procedures.unrestricted=algo.*' /opt/bitnami/neo4j/conf/neo4j.conf\n",
      "fi\n",
      "export JAVA_HOME=\"/opt/bitnami/java\"\n",
      "PATH=$JAVA_HOME/bin:$PATH\n",
      "/opt/bitnami/neo4j/bin/neo4j stop &\n",
      "/bin/echo \"Stopping Neo4j Database\"\n",
      "wait\n",
      "#load up database\n",
      "/opt/bitnami/neo4j/bin/neo4j-admin load --from=/home/bitnami/lernt_init_db.dump --database=graph.db --force &\n",
      "wait\n",
      "#start database\n",
      "/opt/bitnami/neo4j/bin/neo4j start\n",
      "--//\n"

  ]]}}

      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "SSHLocation"}
        } ,
        {
          "IpProtocol" : "tcp",
          "FromPort" : "7474",
          "ToPort" : "7474",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "7687",
          "ToPort" : "7687",
          "CidrIp" : "0.0.0.0/0"
        }
      ]
      }
    }
  },

  "Outputs" : {
    "InstanceId" : {
      "Description" : "InstanceId of the newly created EC2 instance",
      "Value" : { "Ref" : "EC2Instance" }
    },
    "AZ" : {
      "Description" : "Availability Zone of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "AvailabilityZone" ] }
    },
    "PublicDNS" : {
      "Description" : "Public DNSName of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicDnsName" ] }
    },
    "PublicIP" : {
      "Description" : "Public IP address of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicIp" ] }
    }
  }
}
